#include <cmath>
#include <iostream>
#include <pthread.h>
using namespace std;

template <typename T>
T **Alloc2DArray( int nRows, int nCols) {
    T **dynamicArray;
    dynamicArray = new T*[nRows];
    for( int i = 0 ; i < nRows ; i++ )
        dynamicArray[i] = new T [nCols];
    return dynamicArray;
}

class MBset {
  private:
    double w=1, h, xmin, ymin, xmax, ymax, dx, dy,
           a, b, aa, bb, ab, aaa,
           bbb, abb, aab, atmp, btmp,
           cr, ci, maxiterations;;
    int ImageW, ImageH, i, j, y, x;// 40-50
    int** n;
    pthread_t thread1, thread2;

  public:
    MBset(int ImageWidth, int ImageHeight, int maxIt) {
        maxiterations = maxIt;
        ImageW = ImageWidth;
        ImageH = ImageHeight;

        h = (w * ImageH) / ImageW;
        xmin = -w/2;
        ymin = -h/2;
        xmax = xmin + w;
        ymax = ymin + h;
        dx = (xmax - xmin) / ImageW;
        dy = (ymax - ymin) / ImageH;
        n = Alloc2DArray<int>(ImageW, ImageH);
    };

    int** getSet(double Cr, double Ci) {
        cr = Cr; //-0.096, 0.407
        ci = Ci;

        y = ymin;
        for(j=0; j<ImageW; j++) {
            x = xmin;
            for (i=0; i<ImageH; i++) {
                a = x;
                b = y;
                while (n[i][j] < maxiterations) {
                    aaa = a*a*a;
                    bbb = b*b*b;
                    abb = a*b*b;
                    aab = a*a*b;
                    a = aaa - 3*abb + cr;
                    b = 3*aab - bbb + ci;
                    if(aa+bb>4) {
                        cout << "n: " << n[i][j] << endl;
                        n[i][j] = n[i][j]-log(log(aa+bb)/log(2));
                        break;
                    }
                    n[i][j]++;
                }
                n[i][j] = n[i][j]-log(log(aa+bb)/log(4));
                x += dx;
            }
            y += dy;
        }
        return n;
    }

    void ZoomOut() {
        w+=.2;
        h = (w * ImageH) / ImageW;
        xmax = xmin + w;
        ymax = ymin + h;
        dx = (xmax - xmin) / ImageW;
        dy = (ymax - ymin) / ImageH;
        cout << "W: " << w << endl;
    }
    void ZoomIn() {
        w-=.2;
        h = (w * ImageH) / ImageW;
        xmax = xmin + w;
        ymax = ymin + h;
        dx = (xmax - xmin) / ImageW;
        dy = (ymax - ymin) / ImageH;
        cout << "W: " << w << endl;
    }
    void ShiftUp() {
        ymin+=(ymax-ymin)/4;
        ymax+=(ymax-ymin)/4;
    }
    void ShiftDown() {
        ymin-=(ymax-ymin)/4;
        ymax-=(ymax-ymin)/4;
    }
    void ShiftRight() {
        xmin+=(xmax-xmin)/4;
        xmax+=(xmax-xmin)/4;
    }
    void ShiftLeft() {
        xmin-=(xmax-xmin)/4;
        xmax-=(xmax-xmin)/4;
    }

};
